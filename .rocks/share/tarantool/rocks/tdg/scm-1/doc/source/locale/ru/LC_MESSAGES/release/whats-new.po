
#: ../../release/whats-new.rst:2
msgid "What's new in Tarantool Data Grid 2.0"
msgstr "Новые возможности Tarantool Data Grid 2.0"

#: ../../release/whats-new.rst:4
msgid ""
"Tarantool Data Grid (TDG) version 2.0 brings a lot of new features. This "
"document tells about all major changes and new capabilities in version 2.0:"
msgstr ""
"В версии 2.0 Tarantool Data Grid (TDG) появилось много новых функциональных "
"возможностей. В этом документе описываются все основные изменения и новые "
"технические возможности версии 2.0:"

#: ../../release/whats-new.rst:14
msgid "Simplified architecture"
msgstr "Упрощенная архитектура"

#: ../../release/whats-new.rst:16
msgid "Tarantool Data Grid 2.0 has four easily scalable components:"
msgstr ""
"Tarantool Data Grid 2.0 включает в себя четыре легко масштабируемых "
"компонента:"

#: ../../release/whats-new.rst:18
msgid "``Core``: configuration and administration"
msgstr "``Core``: настройка и администрирование"

#: ../../release/whats-new.rst:19
msgid "``Storage``: data validation and storage"
msgstr "``Storage``: проверка и хранение данных"

#: ../../release/whats-new.rst:20
msgid "``Runner``: running the business logic using Lua code"
msgstr "``Runner``: запуск бизнес-логики с помощью кода на Lua"

#: ../../release/whats-new.rst:21
msgid "``Connector``: data exchange with external systems"
msgstr "``Connector``: обмен данными с внешними системами"

#: ../../release/whats-new.rst:23
msgid ""
"You can add nodes instantly, with automatic data redistribution. One TDG "
"cluster consists of several replica sets. In case one of the servers is "
"down, the replica set keeps running without losing any data."
msgstr ""
"Узлы можно добавлять в кластер мгновенно, при этом данные перераспределяются"
" автоматически. Один кластер TDG состоит из нескольких наборов реплик. Если "
"один из серверов остановится, набор реплик продолжит работать, не теряя при "
"этом никаких данных."

#: ../../release/whats-new.rst:27
msgid ""
"You can create as many replica sets with ``storage``, ``runner``, and "
"``connector`` components as you like. The only exception is the ``core``. "
"There can be only one replica set that contains the ``core`` component."
msgstr ""
"Можно создавать сколько угодно наборов реплик с компонентами ``storage``, "
"``runner`` и ``connector``. Единственное исключение — ``core``. Только один "
"набор реплик может содержать компонент ``core``."

#: ../../release/whats-new.rst:33
msgid "Handlers instead of data pipelines"
msgstr "Обработчики вместо конвейеров обработки данных"

#: ../../release/whats-new.rst:35
msgid ""
"When Tarantool Data Grid receives a data package from an external system, it"
" needs to process the data before putting it into a storage."
msgstr ""
"Когда Tarantool Data Grid получает пакет данных из внешней системы, ему "
"нужно обработать данные, прежде чем поместить их в хранилище."

#: ../../release/whats-new.rst:38
msgid ""
"**In version 1.6**, data pipelines processed the incoming data by "
"consecutively calling multiple functions. However, writing code to build "
"these pipelines was a bit of a challenge."
msgstr ""
"**В версии 1.6** конвейеры (пайплайны, pipelines) обрабатывали входящие "
"данные, последовательно вызывая несколько функций. Но написание кода этих "
"конвейеров было непростой задачей."

#: ../../release/whats-new.rst:41
msgid ""
"**In version 2.0**, there are handlers instead of pipelines. Handlers are "
"functions that process the incoming and outcoming data. You can write a "
"handler function using Lua and then bind it to any connector."
msgstr ""
"**В версии 2.0** вместо конвейеров появились обработчики. Обработчики — это "
"функции, которые обрабатывают входящие и исходящие данные. Можно написать "
"функцию-обработчик на Lua, а затем привязать ее к любому коннектору."

#: ../../release/whats-new.rst:45
msgid ""
"An input handler processes all incoming data. After that, data objects are "
"validated and put in a storage. In case the validation process finishes with"
" an error, objects are put in a repair queue."
msgstr ""
"Обработчик ввода обрабатывает все входящие данные. После этого объекты "
"данных проверяются и помещаются в хранилище. Если процесс проверки "
"завершается с ошибкой, объекты попадают в ремонтную очередь."

#: ../../release/whats-new.rst:51
msgid "Visual data model constructor"
msgstr "Визуальный конструктор модели данных"

#: ../../release/whats-new.rst:53
msgid ""
"Data model explicitly determines the structure of data. All incoming data is"
" verified, validated, and stored by the provided data model."
msgstr ""
"Модель данных в явном виде определяет структуру данных. Все входящие данные "
"проверяются, подтверждаются и хранятся в соответствии с предоставленной "
"моделью данных."

#: ../../release/whats-new.rst:56
msgid ""
"Tarantool Data Grid uses `Avro Schema <https://avro.apache.org/>`_ to "
"describe data model. **In version 2.0**, there is no need to write code to "
"describe data structure. Everything is done via an interface that is called "
"a model editor. Model editor has multiple options like adding a field, "
"naming it, setting its type and value, as well as leaving comments."
msgstr ""
"Для описания модели данных Tarantool Data Grid использует формат `Apache "
"Avro <https://avro.apache.org/>`_. **В версии 2.0** нет необходимости писать"
" код, чтобы описать структуру данных. Все действия выполняются через "
"интерфейс, который называется редактором модели. В редакторе модели доступно"
" множество операций, таких как добавление поля, присвоение ему имени, "
"установка его типа и значения, а также есть возможность оставить "
"комментарий."

#: ../../release/whats-new.rst:63
msgid "Optional data versioning"
msgstr "Опциональное версионирование данных"

#: ../../release/whats-new.rst:65
msgid ""
"Data versioning allows one to trace what changes have been made to a data "
"package and when. Data package is a collection of data."
msgstr ""
"Версионирование данных позволяет отследить, какие изменения были внесены в "
"пакет данных и когда. Пакет данных — это набор данных."

#: ../../release/whats-new.rst:68
msgid ""
"In Tarantool Data Grid, when you put a data package in a storage, it is "
"identified by the primary index. If an incoming package has the same primary"
" index yet different data fields, TDG will not delete the already stored "
"data. It will store the new data as a new version."
msgstr ""
"Когда пакет данных попадает в хранилище Tarantool Data Grid, он "
"идентифицируется по первичному индексу. Если первичный индекс у входящего "
"пакета совпадает с уже имеющимся пакетом, TDG не будет удалять хранящиеся "
"данные. Он сохранит новые данные как новую версию этого пакета."

#: ../../release/whats-new.rst:73
msgid ""
"Version history often comes in handy, but it has one side effect. The bigger"
" version history is, the more it influences the performance of the storage."
msgstr ""
"История версий полезна, но у нее есть один побочный эффект. Чем длиннее "
"история версий, тем больше она влияет на производительность хранилища."

#: ../../release/whats-new.rst:76
msgid ""
"**In TDG 2.0**, versioning is off by default. It means that data packages "
"with the same primary index will rewrite each other. This increases "
"performance and reduces the amount of space taken up by the database. But if"
" you need to keep version history, you can always switch this option on."
msgstr ""
"**В Data Grid 2.0** версионирование выключено по умолчанию. Это значит, что "
"пакеты данных с одинаковым первичным индексом перезаписывают друг друга. "
"Благодаря этому повышается производительность и сокращается объем "
"занимаемого базой данных места. Но если вам нужно хранить историю версий, "
"версионирование всегда можно включить."

#: ../../release/whats-new.rst:83
msgid "Multitenancy"
msgstr "Мультитенантность"

#: ../../release/whats-new.rst:85
msgid ""
"Tenant is a single team's workspace. Due to multitenancy, several teams can "
"use a single TDG instance and work on it independently. Tarantool Data Grid "
"helps isolate the code and data through a system of roles and permissions. "
"Each tenant has its own users. Teams work separately, have no access to each"
" other's data, and do not interfere with each other's processes."
msgstr ""
"Тенант — это рабочее пространство отдельной команды. Благодаря "
"мультитенантности несколько команд могут использовать один экземпляр TDG и "
"работать в нем независимо друг от друга. Tarantool Data Grid помогает "
"изолировать код и данные с помощью системы ролей и разрешений. У каждого "
"тенанта — свои пользователи. Команды работают отдельно, не имеют доступа к "
"данным друг друга и не вмешиваются в процессы друг друга."

#: ../../release/whats-new.rst:91
msgid ""
"**Perks:** you make the most of your hardware. Also, TDG interface helps "
"administer such a system by creating teams, roles and giving different "
"rights to users."
msgstr ""
"**Преимущества:** вы максимально эффективно используете свое оборудование. "
"Кроме того, интерфейс TDG помогает администрировать такую систему: создавать"
" команды, роли и выдавать различные права пользователям."
