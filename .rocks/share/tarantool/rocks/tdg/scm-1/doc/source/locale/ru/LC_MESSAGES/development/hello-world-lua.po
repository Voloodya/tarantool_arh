
#: ../../development/hello-world-lua.rst:2
msgid "Hello world with Lua"
msgstr "Hello world на Lua"

#: ../../development/hello-world-lua.rst:4
msgid ""
"This guide explains how to set up a data model, run data queries, and write "
"a couple of stored procedures in Lua."
msgstr ""
"Из этого руководства вы узнаете, как настраивать модель данных, выполнять "
"запросы и создавать хранимые процедуры на языке Lua."

#: ../../development/hello-world-lua.rst:6
msgid ""
"First, you will need a running TDG instance. You can :doc:`run TDG as a "
"Docker container </administration/deployment/run-in-docker>`, or deploy it "
"on your machine :doc:`manually </administration/deployment/manual-"
"deployment>` or with :doc:`Ansible </administration/deployment/ansible-"
"deployment>`."
msgstr ""
"Для начала вам понадобится запущенный экземпляр TDG. Можно :doc:`запустить "
"TDG в Docker-контейнере </administration/deployment/run-in-docker>` или же "
"развернуть его на локальной машине :doc:`вручную "
"</administration/deployment/manual-deployment>` или с помощью :doc:`Ansible "
"</administration/deployment/ansible-deployment>`."

#: ../../development/hello-world-lua.rst:11
msgid "Then you will learn how to:"
msgstr "Затем вы сможете:"

#: ../../development/hello-world-lua.rst:13
msgid ":ref:`Set up the data model <set-up-data-model>`."
msgstr ":ref:`настроить модель данных <set-up-data-model>`;"

#: ../../development/hello-world-lua.rst:14
msgid ":ref:`Run data queries <run-data-queries>`."
msgstr ":ref:`выполнить запрос данных <run-data-queries>`;"

#: ../../development/hello-world-lua.rst:15
msgid ":ref:`Write stored procedures <write-stored-procedures>`."
msgstr ":ref:`написать хранимые процедуры <write-stored-procedures>`."

#: ../../development/hello-world-lua.rst:20
msgid "Setting up the data model"
msgstr "Настройка модели данных"

#: ../../development/hello-world-lua.rst:22
msgid ""
"This guide uses a data model that contains two types of objects: music bands"
" and artists. Each music band has a name, a genre, and a year it was formed."
" Artists have a name, a country, and the instruments they play."
msgstr ""
"В этом руководстве используется модель данных, содержащая два типа объектов:"
" музыкальные группы и исполнители. У каждой музыкальной группы есть "
"название, жанр и год ее создания. Для исполнителей указываются имена, страны"
" происхождения и инструменты, на которых они играют."

#: ../../development/hello-world-lua.rst:26
msgid "Here is an example of such a model:"
msgstr "Вот пример такой модели:"

#: ../../development/hello-world-lua.rst:28
msgid ""
"[\n"
"    {\n"
"        \"name\": \"MusicBand\",\n"
"        \"type\": \"record\",\n"
"        \"fields\": [\n"
"            {\"name\": \"name\", \"type\": \"string\"},\n"
"            {\"name\": \"genre\", \"type\": {\"type\":\"array\", \"items\":\"string\"}},\n"
"            {\"name\": \"wasformed\", \"type\":\"long\"}\n"
"        ],\n"
"        \"indexes\": [\"name\", \"genre\", \"wasformed\"]\n"
"    },\n"
"    {\n"
"        \"name\": \"Artist\",\n"
"        \"type\": \"record\",\n"
"        \"fields\": [\n"
"            {\"name\": \"fullname\", \"type\": \"string\"},\n"
"            {\"name\": \"country\", \"type\": \"string\"},\n"
"            {\"name\": \"instruments\", \"type\": {\"type\":\"array\", \"items\":\"string\"}}\n"
"        ],\n"
"        \"indexes\": [\"fullname\"]\n"
"    }\n"
"]"
msgstr ""
"[\n"
"    {\n"
"        \"name\": \"MusicBand\",\n"
"        \"type\": \"record\",\n"
"        \"fields\": [\n"
"            {\"name\": \"name\", \"type\": \"string\"},\n"
"            {\"name\": \"genre\", \"type\": {\"type\":\"array\", \"items\":\"string\"}},\n"
"            {\"name\": \"wasformed\", \"type\":\"long\"}\n"
"        ],\n"
"        \"indexes\": [\"name\", \"genre\", \"wasformed\"]\n"
"    },\n"
"    {\n"
"        \"name\": \"Artist\",\n"
"        \"type\": \"record\",\n"
"        \"fields\": [\n"
"            {\"name\": \"fullname\", \"type\": \"string\"},\n"
"            {\"name\": \"country\", \"type\": \"string\"},\n"
"            {\"name\": \"instruments\", \"type\": {\"type\":\"array\", \"items\":\"string\"}}\n"
"        ],\n"
"        \"indexes\": [\"fullname\"]\n"
"    }\n"
"]"

#: ../../development/hello-world-lua.rst:53
msgid ""
"In the menu on the left, there is a tab called **Model**. Switch to this tab"
" and paste the model to the **Request** field. Click **Submit**:"
msgstr ""
"В меню слева есть вкладка **Model**. Откройте ее и вставьте модель в поле "
"**Request**. Нажмите **Submit**:"

#: ../../development/hello-world-lua.rst:60
msgid ""
"You have set up the data model. Now you can upload, select, and delete data."
msgstr ""
"Вы настроили модель данных. Теперь можно выполнять загрузку, выборку и "
"удаление данных."

#: ../../development/hello-world-lua.rst:64
msgid "Uploading data to TDG"
msgstr "Загрузка данных в TDG"

#: ../../development/hello-world-lua.rst:66
msgid ""
"In the menu on the left, there is a tab called **GraphQL**. Switch to this "
"tab, select **default** as the desired scheme, and clear the request field:"
msgstr ""
"В меню слева есть вкладка под названием **GraphQL**. Откройте эту вкладку, "
"выберите необходимую схему **default** и удалите всё из поля запроса:"

#: ../../development/hello-world-lua.rst:72
msgid "Paste the following data to the request field:"
msgstr "В поле запроса вставьте такие данные:"

#: ../../development/hello-world-lua.rst:74
msgid ""
"mutation all {\n"
"  rammstein:MusicBand(insert: {\n"
"      name: \"Rammstein\",\n"
"      genre: [\"metal\", \"industrial\", \"gothic\"],\n"
"      wasformed: 1994}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  linkinpark:MusicBand(insert: {\n"
"      name: \"Linkin Park\",\n"
"      genre: [\"alternative\", \"metal\"],\n"
"      wasformed: 1996}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  blacksabbath:MusicBand(insert: {\n"
"      name: \"Black Sabbath\",\n"
"      genre: [\"gothic\", \"metal\"],\n"
"      wasformed: 1968}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  deeppurple:MusicBand(insert:{\n"
"      name: \"Deep Purple\",\n"
"      genre: [\"metal\", \"rock\"],\n"
"      wasformed: 1968}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  maxkorzh:MusicBand(insert:{\n"
"      name:\"Max Korzh\",\n"
"      genre:[\"rap\", \"electro\"],\n"
"      wasformed: 2006}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"}"
msgstr ""
"mutation all {\n"
"  rammstein:MusicBand(insert: {\n"
"      name: \"Rammstein\",\n"
"      genre: [\"metal\", \"industrial\", \"gothic\"],\n"
"      wasformed: 1994}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  linkinpark:MusicBand(insert: {\n"
"      name: \"Linkin Park\",\n"
"      genre: [\"alternative\", \"metal\"],\n"
"      wasformed: 1996}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  blacksabbath:MusicBand(insert: {\n"
"      name: \"Black Sabbath\",\n"
"      genre: [\"gothic\", \"metal\"],\n"
"      wasformed: 1968}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  deeppurple:MusicBand(insert:{\n"
"      name: \"Deep Purple\",\n"
"      genre: [\"metal\", \"rock\"],\n"
"      wasformed: 1968}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"  maxkorzh:MusicBand(insert:{\n"
"      name:\"Max Korzh\",\n"
"      genre:[\"rap\", \"electro\"],\n"
"      wasformed: 2006}) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"}"

#: ../../development/hello-world-lua.rst:120
msgid "Execute query by clicking the play button:"
msgstr "Нажмите кнопку воспроизведения, чтобы выполнить запрос:"

#: ../../development/hello-world-lua.rst:125
msgid "The data is now uploaded."
msgstr "Данные загружены."

#: ../../development/hello-world-lua.rst:130
msgid "Running data queries"
msgstr "Выполнение запросов данных"

#: ../../development/hello-world-lua.rst:133
msgid "Reading data"
msgstr "Чтение данных"

#: ../../development/hello-world-lua.rst:135
msgid ""
"You can read data in the **Graphql** tab. Make sure the **default** scheme "
"is switched on, clear the field on the left, and write a request that "
"selects every music band:"
msgstr ""
"Читать данные можно на вкладке **Graphql**. Убедитесь, что выбрана схема "
"**default**, удалите всё из поля слева и напишите запрос на выборку всех "
"музыкальных групп:"

#: ../../development/hello-world-lua.rst:138
msgid ""
"query {\n"
"  MusicBand {\n"
"    name\n"
"    wasformed\n"
"    genre\n"
"  }\n"
"}"
msgstr ""
"query {\n"
"  MusicBand {\n"
"    name\n"
"    wasformed\n"
"    genre\n"
"  }\n"
"}"

#: ../../development/hello-world-lua.rst:148
msgid "Click the play button. In the right field, you'll get the result:"
msgstr "Нажмите кнопку воспроизведения. В поле справа вы увидите результат:"

#: ../../development/hello-world-lua.rst:154
msgid "Select data by the primary key:"
msgstr "Выполните выборку данных по первичному ключу:"

#: ../../development/hello-world-lua.rst:156
msgid ""
"query {\n"
"  MusicBand(name:\"Black Sabbath\") {\n"
"    name\n"
"    wasformed\n"
"    genre\n"
"  }\n"
"}"
msgstr ""
"query {\n"
"  MusicBand(name:\"Black Sabbath\") {\n"
"    name\n"
"    wasformed\n"
"    genre\n"
"  }\n"
"}"

#: ../../development/hello-world-lua.rst:166
msgid ""
"After clicking the play button, you will get all stored information about "
"the Black Sabbath music band:"
msgstr ""
"Нажав на кнопку воспроизведения, вы получите всю сохраненную информацию о "
"группе Black Sabbath:"

#: ../../development/hello-world-lua.rst:172
msgid "Changing data"
msgstr "Изменение данных"

#: ../../development/hello-world-lua.rst:174
msgid ""
"Add one more music genre to one of the music bands. In the **GraphQL** tab, "
"insert the data about the band with two genres instead of one:"
msgstr ""
"Добавьте еще один музыкальный жанр для одной из групп. Для этого на вкладке "
"**GraphQL** внесите информацию о двух жанрах для группы:"

#: ../../development/hello-world-lua.rst:177
msgid ""
"mutation {\n"
"  MusicBand(insert:{\n"
"      name: \"Deep Purple\",\n"
"      genre: [\"metal\", \"rock\"],\n"
"      wasformed: 1968}) {\n"
"        name\n"
"        genre\n"
"        wasformed\n"
"  }\n"
"}"
msgstr ""
"mutation {\n"
"  MusicBand(insert:{\n"
"      name: \"Deep Purple\",\n"
"      genre: [\"metal\", \"rock\"],\n"
"      wasformed: 1968}) {\n"
"        name\n"
"        genre\n"
"        wasformed\n"
"  }\n"
"}"

#: ../../development/hello-world-lua.rst:190
msgid ""
"Click the play button. The information about the Deep Purple music band is "
"now updated."
msgstr ""
"Нажмите кнопку воспроизведения. Информация о группе Deep Purple обновилась."

#: ../../development/hello-world-lua.rst:194
msgid "Deleting data"
msgstr "Удаление данных"

#: ../../development/hello-world-lua.rst:196
msgid ""
"In the **GraphQL** tab, write the query to delete all data about one of the "
"music bands:"
msgstr ""
"На вкладке **GraphQL** напишите запрос на удаление всех данных об одной из "
"музыкальных групп:"

#: ../../development/hello-world-lua.rst:198
msgid ""
"mutation {\n"
"  MusicBand(name:\"Linkin Park\" delete:true) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"}"
msgstr ""
"mutation {\n"
"  MusicBand(name:\"Linkin Park\" delete:true) {\n"
"    name\n"
"    genre\n"
"    wasformed\n"
"  }\n"
"}"

#: ../../development/hello-world-lua.rst:208
msgid ""
"Click the play button. You've deleted the data about the Linkin Park music "
"band."
msgstr ""
"Нажмите кнопку воспроизведения. Все данные о музыкальной группе Linkin Park "
"удалены."

#: ../../development/hello-world-lua.rst:214
msgid "Writing stored procedures"
msgstr "Написание хранимых процедур"

#: ../../development/hello-world-lua.rst:217
msgid "Hello World"
msgstr "Hello World"

#: ../../development/hello-world-lua.rst:219
msgid ""
"In the menu on the left, there is a tab called **Code**. Switch to the tab "
"and create the ``src`` directory. In the ``src`` directory, create the "
"``hello.lua`` file, which is a Lua module that exports the functions:"
msgstr ""
"В меню слева есть вкладка **Code**. Откройте эту вкладку и создайте "
"директорию ``src``. В директории ``src`` создайте файл ``hello.lua``, "
"представляющий собой Lua-модуль для экспорта функций:"

#: ../../development/hello-world-lua.rst:223
msgid ""
"function hello()\n"
"  return \"Hello World\"\n"
"end\n"
"\n"
"return {\n"
"  hello = hello\n"
"}"
msgstr ""
"function hello()\n"
"  return \"Hello World\"\n"
"end\n"
"\n"
"return {\n"
"  hello = hello\n"
"}"

#: ../../development/hello-world-lua.rst:233
#: ../../development/hello-world-lua.rst:249
msgid "Click **Apply**:"
msgstr "Нажмите **Apply**:"

#: ../../development/hello-world-lua.rst:238
msgid ""
"This Lua module requires a GraphQL interface. In the **Code** tab, create a "
"file called ``services.yml`` and specify the signature of the GraphQL call:"
msgstr ""
"Для этого Lua-модуля необходим GraphQL-интерфейс. На вкладке **Code** "
"создайте файл под названием ``services.yml`` и задайте сигнатуру GraphQL-"
"вызова:"

#: ../../development/hello-world-lua.rst:241
msgid ""
"hello_world:\n"
"  doc: \"Hello World script\"\n"
"  function: hello.hello\n"
"  return_type: string"
msgstr ""
"hello_world:\n"
"  doc: \"Hello World script\"\n"
"  function: hello.hello\n"
"  return_type: string"

#: ../../development/hello-world-lua.rst:254
msgid ""
"The code is validated and uploaded to the cluster. If there is an error, a "
"notification at the bottom right corner will give you the details about it."
msgstr ""
"Код проверяется и загружается в кластер. Если произойдет ошибка, в правом "
"нижнем углу вы увидите уведомление с ее описанием."

#: ../../development/hello-world-lua.rst:257
msgid ""
"Now switch to the **Graphql** tab, select **default** the desired scheme, "
"and call the stored procedure:"
msgstr ""
"Откройте вкладку **Graphql**, выберите необходимую схему **default** и "
"вызовите хранимую процедуру:"

#: ../../development/hello-world-lua.rst:259
msgid ""
"{\n"
"  hello_world\n"
"}"
msgstr ""
"{\n"
"  hello_world\n"
"}"

#: ../../development/hello-world-lua.rst:265
msgid "In the right field, you'll get the result:"
msgstr "В поле справа вы получите результат:"

#: ../../development/hello-world-lua.rst:271
msgid "Randomized playlist"
msgstr "Плейлист со случайным порядком воспроизведения"

#: ../../development/hello-world-lua.rst:273
msgid ""
"In the dataset, there are various music bands. Make a stored procedure to "
"give you a randomized playlist."
msgstr ""
"В наборе данных есть разные музыкальные группы. Создайте хранимую процедуру "
"для создания плейлиста, который будет воспроизводить песни в случайном "
"порядке."

#: ../../development/hello-world-lua.rst:276
msgid ""
"In the **Code** tab, open the ``src`` directory and create a file called "
"``playlist.lua``. This file defines the logic to generate a randomized "
"playlist:"
msgstr ""
"На вкладке **Code** откройте директорию ``src`` и создайте файл под "
"названием ``playlist.lua``. В этом файле задайте логику для создания "
"плейлиста со случайным порядком воспроизведения:"

#: ../../development/hello-world-lua.rst:279
msgid ""
"local repository = require('repository')\n"
"\n"
"function shuffle(tbl)\n"
"  for i = #tbl, 2, -1 do\n"
"    local j = math.random(i)\n"
"    tbl[i], tbl[j] = tbl[j], tbl[i]\n"
"  end\n"
"  return tbl\n"
"end\n"
"\n"
"function playlist()\n"
"  local result = repository.find(\"MusicBand\", {})\n"
"  result = result or {}\n"
"  shuffle(result)\n"
"  return result\n"
"end\n"
"\n"
"return {\n"
"    playlist=playlist\n"
"}"
msgstr ""
"local repository = require('repository')\n"
"\n"
"function shuffle(tbl)\n"
"  for i = #tbl, 2, -1 do\n"
"    local j = math.random(i)\n"
"    tbl[i], tbl[j] = tbl[j], tbl[i]\n"
"  end\n"
"  return tbl\n"
"end\n"
"\n"
"function playlist()\n"
"  local result = repository.find(\"MusicBand\", {})\n"
"  result = result or {}\n"
"  shuffle(result)\n"
"  return result\n"
"end\n"
"\n"
"return {\n"
"    playlist=playlist\n"
"}"

#: ../../development/hello-world-lua.rst:302
msgid "In the ``services.yml``, specify the signature of the GraphQL call:"
msgstr "В файле ``services.yml`` задайте сигнатуру GraphQL-вызова:"

#: ../../development/hello-world-lua.rst:304
msgid ""
"playlist:\n"
"    doc: \"Return randomized playlist\"\n"
"    function: playlist.playlist\n"
"    return_type: {\"type\":\"array\", \"items\":\"MusicBand\"}"
msgstr ""
"playlist:\n"
"    doc: \"Return randomized playlist\"\n"
"    function: playlist.playlist\n"
"    return_type: {\"type\":\"array\", \"items\":\"MusicBand\"}"

#: ../../development/hello-world-lua.rst:311
msgid "Switch to the **GraphQL** tab and run this command:"
msgstr "Перейдите на вкладку **GraphQL** и выполните такую команду:"

#: ../../development/hello-world-lua.rst:313
msgid ""
"{\n"
"    playlist { name }\n"
"}"
msgstr ""
"{\n"
"    playlist { name }\n"
"}"

#: ../../development/hello-world-lua.rst:320
msgid "Click the play button. As a result, you'll get a randomized playlist:"
msgstr ""
"Нажмите кнопку воспроизведения. В результате вы получите плейлист, в котором"
" группы представлены в случайном порядке:"

#: ../../development/hello-world-lua.rst:326
msgid "Each time you click the play button, you'll get a different playlist."
msgstr "Выполняя это команду, вы каждый раз будете получать новый плейлист."
